/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vincent.battleshipgame;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.management.BadAttributeValueExpException;
import model.BattleShipBoard;
import model.Command;
import model.Player;
import model.SimpleTCP;

/**
 *
 * @author vince
 */
public class MainFrame extends javax.swing.JFrame 
{
    BattleShipBoard board;
    String name;
    boolean isHost;
    String ip;
    int port;
    SimpleTCP simpleTCP;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() 
    {
        initComponents();
        isHost = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPanel = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ipTextBox = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        portTextBox = new javax.swing.JTextField();
        hostGameButton = new javax.swing.JButton();
        connectButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        nameTextBox = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        selfBoardTextBox = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        carrierShipTextBox = new javax.swing.JTextField();
        battleShipTextBox = new javax.swing.JTextField();
        crusierShipTextBox = new javax.swing.JTextField();
        submarineShipTextBox = new javax.swing.JTextField();
        destroyerShipTextbox = new javax.swing.JTextField();
        placeShipButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        shootBoardTextBox = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        shootAtTextBox = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        shootButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        playerTurnLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        startGameButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        playerListTextBox = new javax.swing.JTextArea();
        lockInBoardButton = new javax.swing.JButton();
        resumeGameButton = new javax.swing.JButton();
        resetGameButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Battle Ship Multiplayer Game");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("IP:");

        ipTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ipTextBox.setText("localhost");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Port:");

        portTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        portTextBox.setText("1111");

        hostGameButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        hostGameButton.setText("Host Game");
        hostGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostGameButtonActionPerformed(evt);
            }
        });

        connectButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        connectButton.setText("Connect to Host");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Name:");

        nameTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nameTextBox.setText("Player");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ipTextBox))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portTextBox))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(hostGameButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectButton)
                        .addGap(0, 540, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameTextBox)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ipTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(portTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostGameButton)
                    .addComponent(connectButton))
                .addContainerGap(478, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Main Menu", jPanel1);

        selfBoardTextBox.setEditable(false);
        selfBoardTextBox.setColumns(20);
        selfBoardTextBox.setRows(5);
        jScrollPane1.setViewportView(selfBoardTextBox);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Place Carrier Ship (5 square)");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Place Battle Ship (4 square)");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Place Crusier Ship (3 square)");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Place Submarine (3 square)");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Place Destroyer Ship (2 square)");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Example placement: A1 B1 C1");

        carrierShipTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        battleShipTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        crusierShipTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        submarineShipTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        destroyerShipTextbox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        placeShipButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        placeShipButton.setText("Place Ship");
        placeShipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeShipButtonActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton1.setText("See player List");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(carrierShipTextBox))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(battleShipTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(crusierShipTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submarineShipTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(destroyerShipTextbox, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(placeShipButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(carrierShipTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(battleShipTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(crusierShipTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(submarineShipTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(destroyerShipTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(placeShipButton)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        tabbedPanel.addTab("Self Board", jPanel2);

        shootBoardTextBox.setEditable(false);
        shootBoardTextBox.setColumns(20);
        shootBoardTextBox.setRows(5);
        jScrollPane3.setViewportView(shootBoardTextBox);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Shoot at square:");

        shootAtTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Example square: A1");

        shootButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        shootButton.setText("Shoot");
        shootButton.setEnabled(false);
        shootButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shootButtonActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("Current Player turn:");

        playerTurnLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        playerTurnLabel.setText("...");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shootAtTextBox))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(shootButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerTurnLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(playerTurnLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(shootAtTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shootButton)
                .addGap(125, 125, 125))
        );

        tabbedPanel.addTab("Shoot Board", jPanel3);

        startGameButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        startGameButton.setText("Start The Game");
        startGameButton.setEnabled(false);
        startGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startGameButtonActionPerformed(evt);
            }
        });

        playerListTextBox.setEditable(false);
        playerListTextBox.setColumns(20);
        playerListTextBox.setRows(5);
        jScrollPane2.setViewportView(playerListTextBox);

        lockInBoardButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lockInBoardButton.setText("Lock in self board");
        lockInBoardButton.setEnabled(false);
        lockInBoardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockInBoardButtonActionPerformed(evt);
            }
        });

        resumeGameButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        resumeGameButton.setText("Resume Game");
        resumeGameButton.setEnabled(false);
        resumeGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeGameButtonActionPerformed(evt);
            }
        });

        resetGameButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        resetGameButton.setText("Reset Game");
        resetGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetGameButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(startGameButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lockInBoardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 281, Short.MAX_VALUE)
                        .addComponent(resumeGameButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetGameButton)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(startGameButton)
                        .addComponent(lockInBoardButton))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(resumeGameButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(resetGameButton))
                        .addGap(1, 1, 1)))
                .addContainerGap())
        );

        tabbedPanel.addTab("PlayerList", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPanel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPanel)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void hostGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostGameButtonActionPerformed
        // TODO add your handling code here:
        this.placeShipButton.setEnabled(true);
        this.lockInBoardButton.setEnabled(false);
        this.startGameButton.setEnabled(true);
        this.isHost = true;
        this.ip = ipTextBox.getText();
        this.port = Integer.parseInt(portTextBox.getText());
        this.name = nameTextBox.getText();
        
        
        board = new BattleShipBoard(getLocalHost(), this.port, this.isHost, this.name);
        
        selfBoardTextBox.setText(board.printSelfBoard());
        
        this.hostGameButton.setEnabled(false);
        this.connectButton.setEnabled(false);
        
        tabbedPanel.setSelectedIndex(1);
        
        this.simpleTCP = new SimpleTCP(getLocalHost(), port)
        {
            @Override
            public void handleRecieveData(String data) {
                handleRecieveFromClient(data);
            }
            @Override
            public void handleDisconnect(String ip, int port) 
            {
                super.handleDisconnect(ip, port);
                handleDisconnectToClient(ip, port);
            }
        };
        this.simpleTCP.startServer();
    }//GEN-LAST:event_hostGameButtonActionPerformed

    private void placeShipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeShipButtonActionPerformed
        // TODO add your handling code here:
        board.resetSelfBoard();
        String[] carrier = this.carrierShipTextBox.getText().split(" ");
        String[] battleShip = this.battleShipTextBox.getText().split(" ");
        String[] cruisier = this.crusierShipTextBox.getText().split(" ");
        String[] submarine = this.submarineShipTextBox.getText().split(" ");
        String[] destroyer = this.destroyerShipTextbox.getText().split(" ");
        
        board.placeCarrier(carrier);
        board.placeBattleShip(battleShip);
        board.placeCrusier(cruisier);
        board.placeSubmarine(submarine);
        board.placeDestroyer(destroyer);
        
        selfBoardTextBox.setText(board.printSelfBoard());
    }//GEN-LAST:event_placeShipButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        this.lockInBoardButton.setEnabled(true);
        this.placeShipButton.setEnabled(true);
        this.isHost = false;
        this.ip = ipTextBox.getText();
        this.port = Integer.parseInt(portTextBox.getText());
        this.name = nameTextBox.getText();
        
        board = new BattleShipBoard(getLocalHost(), this.port, this.isHost, this.name);
        
        selfBoardTextBox.setText(board.printSelfBoard());
        
        this.hostGameButton.setEnabled(false);
        this.connectButton.setEnabled(false);
        
        tabbedPanel.setSelectedIndex(1);
        
        this.startGameButton.setEnabled(false);
    }//GEN-LAST:event_connectButtonActionPerformed

    private void startGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startGameButtonActionPerformed
        // TODO add your handling code here:
        this.placeShipButton.setEnabled(false);
        this.startGameButton.setEnabled(false);
        String response = this.board.startTheGame();
        simpleTCP.server.sendToAllClient(response);
        checkSelfTurn();
    }//GEN-LAST:event_startGameButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.tabbedPanel.setSelectedIndex(3);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void lockInBoardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockInBoardButtonActionPerformed
        // TODO add your handling code here:
        this.simpleTCP = new SimpleTCP(this.ip, this.port)
        {
            @Override
            public void handleRecieveData(String data) 
            {
                handleRecieveFromServer(data);
            }
            
            @Override
            public void handleDisconnect(String ip, int port) 
            {
                super.handleDisconnect(ip, port);
                handleDisconnectToServer(ip, port);
            }

        };
        
        if(simpleTCP.connect());
        {
            this.placeShipButton.setEnabled(false);
            this.lockInBoardButton.setEnabled(false);
            simpleTCP.client.SendToServer(board.createAddPlayerCommand());
        }
    }//GEN-LAST:event_lockInBoardButtonActionPerformed

    private void shootButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shootButtonActionPerformed
        // TODO add your handling code here:
        
        String square = shootAtTextBox.getText().toUpperCase();
        
        try 
        {
            String jsonPacket = board.createShootCommand(square);
            
            if(this.isHost)
            {
                board.handleCommand(jsonPacket);
                simpleTCP.server.sendToAllClient(jsonPacket);
                
                if(!checkGameover())
                    checkSelfTurn();
                
                
            }
            else
            {
                simpleTCP.client.SendToServer(jsonPacket);
            }
        } 
        catch (BadAttributeValueExpException ex) 
        {
            ex.printStackTrace();
        }
        
        
        
    }//GEN-LAST:event_shootButtonActionPerformed

    private void resumeGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resumeGameButtonActionPerformed
        // TODO add your handling code here:
        this.resumeGameButton.setEnabled(false);
        
        this.board.shufflePlayerTurn();
        
        this.simpleTCP.server.sendToAllClient(board.createUpdateBoardCommand());
        
        checkSelfTurn();
        
        this.shootButton.setEnabled(true);
    }//GEN-LAST:event_resumeGameButtonActionPerformed

    private void resetGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetGameButtonActionPerformed
        // TODO add your handling code here:
        resetGame();
    }//GEN-LAST:event_resetGameButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField battleShipTextBox;
    private javax.swing.JTextField carrierShipTextBox;
    private javax.swing.JButton connectButton;
    private javax.swing.JTextField crusierShipTextBox;
    private javax.swing.JTextField destroyerShipTextbox;
    private javax.swing.JButton hostGameButton;
    private javax.swing.JTextField ipTextBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton lockInBoardButton;
    private javax.swing.JTextField nameTextBox;
    private javax.swing.JButton placeShipButton;
    private javax.swing.JTextArea playerListTextBox;
    private javax.swing.JLabel playerTurnLabel;
    private javax.swing.JTextField portTextBox;
    private javax.swing.JButton resetGameButton;
    private javax.swing.JButton resumeGameButton;
    private javax.swing.JTextArea selfBoardTextBox;
    private javax.swing.JTextField shootAtTextBox;
    private javax.swing.JTextArea shootBoardTextBox;
    private javax.swing.JButton shootButton;
    private javax.swing.JButton startGameButton;
    private javax.swing.JTextField submarineShipTextBox;
    private javax.swing.JTabbedPane tabbedPanel;
    // End of variables declaration//GEN-END:variables
    public static String getLocalHost()
    {
        try 
        {
            return InetAddress.getLocalHost().getHostAddress();
        }
        catch (UnknownHostException ex) 
        {
            Logger.getLogger(BattleShipGame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    public void handleRecieveFromClient(String data)
    {
        String response = board.handleCommand(data);
        
        if(board.lastestCommandCode == Command.SHOOT)
        {
            simpleTCP.server.sendToAllClient(response);
            
            if(!checkGameover())
                checkSelfTurn();
        }
        
        if(board.lastestCommandCode == Command.ADDPLAYER || board.lastestCommandCode == Command.UPDATEBOARD)
        {
            checkConnection();
            
            simpleTCP.server.sendToAllClient(this.board.createUpdateBoardCommand());
        }
        
        if(board.lastestCommandCode == Command.KEEPALIVE)
        {
            checkConnection();
            
            simpleTCP.server.sendToAllClient(response);
        }
    }
    
    public void handleRecieveFromServer(String data)
    {
        board.handleCommand(data);
        
        if(board.lastestCommandCode == Command.ADDPLAYER || board.lastestCommandCode == Command.UPDATEBOARD)
        {
            checkConnection();
        }
        
        if(board.lastestCommandCode == Command.REQUESTKEEPALIVE)
        {
            simpleTCP.client.SendToServer(board.createKeepAlive());
        }
        
        if(!checkGameover())
            checkSelfTurn();
    }
    
    public void checkConnection()
    {
        String text = "";
        for(Player player: board.playerList)
        {
            text += String.format("Player: %s | IP: %s | port: %s\n", player.name, player.ipv4, player.port);
        }

        this.playerListTextBox.setText(text);
    }
    
    public void checkSelfTurn()
    {
        playerTurnLabel.setText("...");
        for(Player player : board.playerList)
        {
            if(player.selfTurn)
            {
                playerTurnLabel.setText(player.name);
                break;
            }
        }
        
        if(board.isSelfTurn())
        {
            this.shootButton.setEnabled(true);
            this.shootBoardTextBox.setText(board.printShootBoard());
        }
        else
        {
            this.shootButton.setEnabled(false);
            this.shootBoardTextBox.setText(board.printSelfBoard());
        }
        
        this.selfBoardTextBox.setText(board.printSelfBoard());
        
        this.tabbedPanel.setSelectedIndex(2);
    }
    
    public boolean checkGameover()
    {
        if(board.isGameOver())
        {
            displayWinner();
            return true;
        }
        
        return false;
    }
    
    public void displayWinner()
    {
        Player winner = null;
            
        for(Player player : board.playerList)
        {
            if(!player.boardMatrix.isAllShipShink())
            {
                winner = player;
                break;
            }
        }
        
        String text = "";
        for(Player player: board.playerList)
        {
            if(player == winner)
                text += String.format("Player: %s | IP: %s | port: %s --> winner\n", player.name, player.ipv4, player.port);
            else
                text += String.format("Player: %s | IP: %s | port: %s --> lost\n", player.name, player.ipv4, player.port);
        }

        this.playerListTextBox.setText(text);
        
        this.tabbedPanel.setSelectedIndex(3);
    }
    
    public void updateBoard()
    {
        this.selfBoardTextBox.setText(board.printSelfBoard());
        this.shootBoardTextBox.setText(board.printShootBoard());
    }
    
    public void handleDisconnectToServer(String ip, int port)
    {
        this.shootButton.setEnabled(false);
        
        this.tabbedPanel.setSelectedIndex(3);
        
        if(board.playerList.size() > 2)
        {
            if(board.playerList.get(1) == board.getSelfFromPlayerList())
            {
                board.removeAllButSelf();
                
                checkConnection();
                
                this.isHost = true;
                
                this.simpleTCP = new SimpleTCP(getLocalHost(), port)
                {
                    @Override
                    public void handleRecieveData(String data) {
                        handleRecieveFromClient(data);
                    }
                    @Override
                    public void handleDisconnect(String ip, int port) 
                    {
                        super.handleDisconnect(ip, port);
                        handleDisconnectToClient(ip, port);
                    }
                };
                
                this.simpleTCP.startServer();
                
                this.resumeGameButton.setEnabled(true);
            }
            else
            {
                String newIP = board.playerList.get(1).ipv4;
                int newPort = board.playerList.get(1).port;
                
                this.simpleTCP = new SimpleTCP(newIP, newPort)
                {
                    @Override
                    public void handleRecieveData(String data) 
                    {
                        handleRecieveFromServer(data);
                    }

                    @Override
                    public void handleDisconnect(String ip, int port) 
                    {
                        super.handleDisconnect(ip, port);
                        handleDisconnectToServer(ip, port);
                    }

                };
                
                this.simpleTCP.connect();
                
                this.board.removeAllButSelf();
                
                this.simpleTCP.client.SendToServer(board.createAddPlayerCommand());
                
                checkConnection();
            }
            
            checkConnection();
        }
    }
    
    public void handleDisconnectToClient(String ip, int port)
    { 
        this.shootButton.setEnabled(false);
        
        this.board.removeAllButSelf();
        
        checkConnection();
        
        simpleTCP.server.waitAndSendToAllClient(2000, board.createRequestKeepAlive());
        
        this.tabbedPanel.setSelectedIndex(3);
        this.resumeGameButton.setEnabled(true);
        
        checkConnection();
    }
    
    public void resetGame()
    {
        try
        {
            if(this.isHost)
                this.simpleTCP.server.shutdownServer();
            else
                this.simpleTCP.client.close();
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        
        this.tabbedPanel.setSelectedIndex(0);
        
        this.hostGameButton.setEnabled(true);
        this.connectButton.setEnabled(true);
        
    }
}
